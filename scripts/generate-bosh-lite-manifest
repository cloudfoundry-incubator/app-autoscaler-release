#!/bin/bash

set -e

example=$(dirname $0)/../example

usage() {
  >&2 cat <<EOF
SYNOPSIS:
    Generate a bosh-lite manifest for an Autoscaler deployment to accompany an existing CF deployment.
USAGE:
    $0 <MANDATORY ARGUMENTS> [OPTIONAL ARGUMENTS]
MANDATORY ARGUMENTS:
    -c <cf-path>                Path to CF manifest file.
    -i <cloud-config-path>      Path to cloud-config stub file.
    -p <property-path>          Path to property-overrides stub file.
OPTIONAL ARGUMENTS:
    -d <db-stub-path>           Path to database stub file.
EXAMPLE:
    $0 \\
      -c ../cf-release/bosh-lite/deployments/cf.yml \\
      -i ./example/cloud-config.yml \\
      -p ./example/property-overrides.yml \\
      -d ./example/dbstubs/db-stub-external.yml \\
EOF
  exit 1
}

while getopts "c:i:p:d:" opt; do
  case "$opt" in
    c)
        cf_manifest_file=$OPTARG
        ;;
    i)
        cloud_config_file=$OPTARG
        ;;
    p)
        property_overrides=$OPTARG
        ;;
    d)
        db_settings=$OPTARG
        ;;
    *)  echo "Unknown arguments"
        usage
        ;;
  esac
done


if [ -z ${cf_manifest_file} ]; then
  >&2 echo "ERROR: CF manifest file is missing"
  argument_error=true
else
  if [ ! -f "${cf_manifest_file}" ]; then
    >&2 echo "ERROR: CF manifest '${cf_manifest_file}' is not a regular file"
    argument_error=true
  fi
fi

if [ -z ${cloud_config_file} ]; then
  >&2 echo "ERROR: Cloud-config stub file is missing"
  argument_error=true
else
  if [ ! -f "${cloud_config_file}" ]; then
    >&2 echo "ERROR: Cloud-config stub '${cloud_config_file}' is not a regular file"
    argument_error=true
  fi
fi

if [ -z ${property_overrides} ]; then
  >&2 echo "ERROR: Property-overrides stub file is missing"
  argument_error=true

else
  if [ ! -f "${property_overrides}" ]; then
    >&2 echo "ERROR: Property-overrides stub '${property_overrides}' is not a regular file"
    argument_error=true
  fi
fi

if [[ ! -z "${db_settings}" && ! -f "${db_settings}" ]]; then
  >&2 echo "ERROR: Database Setting stub '${db_settings}' is not a regular file"
  argument_error=true
fi

if [ ! -z $argument_error ]; then
  echo
  usage
fi


BOSH_STATUS=$(bosh status)
DIRECTOR_UUID=$(bosh status --uuid)
EXPECTED_DIRECTOR_NAME="Bosh Lite Director"

if [[ "$(echo "$BOSH_STATUS" | grep Name)" != *"$EXPECTED_DIRECTOR_NAME"* ]]; then
  echo "Can only target $EXPECTED_DIRECTOR_NAME. Please use 'bosh target' before running this script."
  exit 1
fi

tmpdir=$(mktemp -d /tmp/autoscaler-bosh-lite-manifest.XXXXX)
director_uuid=${tmpdir}/director.yml
printf "director_uuid: %s" $(bosh status --uuid) > ${director_uuid}

# Check for spiff installation
which spiff > /dev/null 2>&1 || {
  echo "Aborted. Please install spiff by following https://github.com/cloudfoundry-incubator/spiff#installation" 1>&2
  exit 1
}

spiff merge \
  ${example}/config-from-cf.yml \
  ${cf_manifest_file} \
  > ${tmpdir}/config-from-cf-merged.yml

spiff merge \
${example}/bosh-lite-manifest-template.yml \
${director_uuid} \
${property_overrides} \
${db_settings} \
${tmpdir}/config-from-cf-merged.yml  \
> ${tmpdir}/autoscaler-bosh-lite-manifest.yml

bosh update cloud-config  ${cloud_config_file}
bosh deployment ${tmpdir}/autoscaler-bosh-lite-manifest.yml

